/*Boost Software License - Version 1.0 - August 17th, 2003*/
/**/
/*Permission is hereby granted, free of charge, to any person or organization*/
/*obtaining a copy of the software and accompanying documentation covered by*/
/*this license (the "Software") to use, reproduce, display, distribute,*/
/*execute, and transmit the Software, and to prepare derivative works of the*/
/*Software, and to permit third-parties to whom the Software is furnished to*/
/*do so, all subject to the following:*/
/**/
/*The copyright notices in the Software and this entire statement, including*/
/*the above license grant, this restriction and the following disclaimer,*/
/*must be included in all copies of the Software, in whole or in part, and*/
/*all derivative works of the Software, unless such copies or derivative*/
/*works are solely in the form of machine-executable object code generated by*/
/*a source language processor.*/
/**/
/*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*/
/*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,*/
/*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT*/
/*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE*/
/*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,*/
/*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER*/
/*DEALINGS IN THE SOFTWARE.*/

// from https://github.com/shibatch/sleef
// src/libm/sleefsp.c

#include <string.h>
#include <stdint.h>

#define SLEEF_INFINITYf __builtin_inff()
#define R_LN2f 1.442695040888963407359924681001892137426645954152985934135449406931f
#define L2Uf 0.693145751953125f
#define L2Lf 1.428606765330187045e-06f
#define INLINE __attribute__((always_inline))

static INLINE float sleef_rintfk(float x) { return x < 0 ? (int)(x - 0.5f) : (int)(x + 0.5f); }
static INLINE float sleef_mlaf(float x, float y, float z) { return x * y + z; }

static INLINE float sleef_intBitsToFloat(int32_t i) {
  float ret;
  memcpy(&ret, &i, sizeof(ret));
  return ret;
}

static INLINE float sleef_pow2if(int q) {
  return sleef_intBitsToFloat(((int32_t)(q + 0x7f)) << 23);
}

static INLINE float sleef_ldexp2kf(float d, int e) { // faster than ldexpkf, short reach
  return d * sleef_pow2if(e >> 1) * sleef_pow2if(e - (e >> 1));
}

float Sleef_redux_finz_expf_u10scalar(float d) {
  int q = (int)sleef_rintfk(d * R_LN2f);
  float s, u;

  s = sleef_mlaf(q, -L2Uf, d);
  s = sleef_mlaf(q, -L2Lf, s);

  u = 0.000198527617612853646278381;
  u = sleef_mlaf(u, s, 0.00139304355252534151077271);
  u = sleef_mlaf(u, s, 0.00833336077630519866943359);
  u = sleef_mlaf(u, s, 0.0416664853692054748535156);
  u = sleef_mlaf(u, s, 0.166666671633720397949219);
  u = sleef_mlaf(u, s, 0.5);

  u = s * s * u + s + 1.0f;
  u = sleef_ldexp2kf(u, q);

  if (d < -104) u = 0;
  if (d >  104) u = SLEEF_INFINITYf;

  return u;
}

float Sleef_redux_expf_u10scalar(float d) {
  int q = (int)sleef_rintfk(d * R_LN2f);
  float s, u;

  s = sleef_mlaf(q, -L2Uf, d);
  s = sleef_mlaf(q, -L2Lf, s);

  u = 0.000198527617612853646278381;
  u = sleef_mlaf(u, s, 0.00139304355252534151077271);
  u = sleef_mlaf(u, s, 0.00833336077630519866943359);
  u = sleef_mlaf(u, s, 0.0416664853692054748535156);
  u = sleef_mlaf(u, s, 0.166666671633720397949219);
  u = sleef_mlaf(u, s, 0.5);

  u = s * s * u + s + 1.0f;
  u = sleef_ldexp2kf(u, q);

  return u;
}

#undef SLEEF_INFINITYf
#undef R_LN2f
#undef INLINE
#undef L2Uf
